name: GDPR Data Cleanup

on:
  # Daily execution at 3:00 AM UTC
  schedule:
    - cron: "0 3 * * *"

  # Manual execution trigger
  workflow_dispatch:
    inputs:
      force_execution:
        description: "Force execution even if no data to purge"
        required: false
        default: false
        type: boolean

jobs:
  gdpr-cleanup:
    runs-on: ubuntu-latest
    name: Execute GDPR Data Purges

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Supabase connectivity
        run: |
          echo "🔗 Testing Supabase connectivity..."

          # Test basic connection
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            "${{ vars.SUPABASE_URL }}/rest/v1/")

          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$http_code" == "200" ] || [ "$http_code" == "404" ]; then
            echo "Supabase connection successful (HTTP $http_code)"
          else
            echo "Supabase connection failed (HTTP $http_code)"
            echo "Response: $response"
            exit 1
          fi

      - name: Execute GDPR purge function
        id: purge
        run: |
          set -e  # Arrêter en cas d'erreur
          
          echo "🚀 Starting GDPR automatic cleanup..."

          # Call Supabase Edge Function
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}" \
            "${{ vars.SUPABASE_URL }}/functions/v1/scheduled-cleanup")

          # Extract HTTP status code
          http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          response_body=$(echo "$response" | sed -e 's/HTTPSTATUS:.*//g')

          echo "📡 HTTP Status: $http_code"
          echo "📄 Response: $response_body"

          # Verify success
          if [ "$http_code" = "200" ]; then
            echo "✅ GDPR purge executed successfully"
            
            # Parse purges count with Python for reliability
            purges_count=$(echo "$response_body" | python3 -c "
            import sys, json
            try:
                data = json.load(sys.stdin)
                print(data.get('purges_executed', 0))
            except:
                print(0)
            ")
            
            echo "📊 Purges executed: $purges_count"
            
            # Write outputs safely
            echo "purges_executed=$purges_count" >> "$GITHUB_OUTPUT"
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ GDPR purge failed with HTTP $http_code"
            echo "📄 Error response: $response_body"
            echo "success=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Report execution results
        if: always()
        run: |
          SUCCESS="${{ steps.purge.outputs.success }}"
          PURGES="${{ steps.purge.outputs.purges_executed }}"

          if [ "$SUCCESS" == "true" ]; then
            echo "GDPR cleanup completed successfully"
            echo "Execution statistics:"
            echo "  - Purges executed: ${PURGES:-0}"
            echo "  - Execution time: $(date -u)"
            echo "  - Next scheduled run: Tomorrow at 3:00 AM UTC"
          else
            echo "GDPR cleanup failed"
            echo "Please check the logs above for error details"
          fi

      - name: Handle failure notification
        if: failure()
        run: |
          echo "GDPR Cleanup Job Failed"
          echo "Timestamp: $(date -u)"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          # Add Slack/Discord notification here if needed

# =====================================================
# CONFIGURATION REQUIREMENTS
# =====================================================
#
# Repository Settings > Secrets and variables > Actions:
#
# SECRETS (tab "Secrets"):
# 1. SUPABASE_ANON_KEY
#    Value: Your Supabase public anonymous key
#
# VARIABLES (tab "Variables"):
# 2. SUPABASE_URL
#    Value: https://your-project-id.supabase.co
#
# OPTIONAL:
# 3. CLEANUP_API_TOKEN (secret)
#    Value: Custom token to secure the endpoint
#
# =====================================================
# WORKFLOW FUNCTIONALITY
# =====================================================
#
# Schedule: Daily execution at 3:00 AM UTC
# Action: Calls your Supabase Edge Function scheduled-cleanup
# Result: Purges users deleted 3+ years ago
# Monitoring: Detailed logs in GitHub Actions
# Alerts: Failures visible in Actions tab
#
# =====================================================
