import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Alert,
  CircularProgress,
  Divider,
} from "@mui/material";
import {
  Restore as RestoreIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
} from "@mui/icons-material";
import { UserProfile } from "@/types/userManagement";
import {
  AnonymizationStatus,
  AnonymizationDetails,
} from "../components/AnonymizationStatus";
import { AnonymizationLevel } from "@/types/dataRetention";

interface RestoreUserModalProps {
  open: boolean;
  user: UserProfile | null;
  onClose: () => void;
  onConfirm: (userId: string) => Promise<void>;
  isRestoring: boolean;
}

export const RestoreUserModal: React.FC<RestoreUserModalProps> = ({
  open,
  user,
  onClose,
  onConfirm,
  isRestoring,
}) => {
  const [error, setError] = useState<string>("");

  const handleConfirm = async () => {
    if (!user) return;

    try {
      setError("");
      await onConfirm(user.id);
      onClose();
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Erreur lors de la restauration"
      );
    }
  };

  const handleClose = () => {
    if (!isRestoring) {
      onClose();
      setError("");
    }
  };

  const getRestorabilityStatus = () => {
    if (!user) return null;

    const anonymizationLevel = (user as any).anonymization_level;
    const anonymizedAt = (user as any).anonymized_at;
    const scheduledPurgeAt = (user as any).scheduled_purge_at;

    // V√©rifier si la purge est d√©j√† pass√©e
    if (scheduledPurgeAt && new Date(scheduledPurgeAt) < new Date()) {
      return {
        canRestore: false,
        severity: "error" as const,
        title: "Restauration impossible",
        message:
          "Les donn√©es ont √©t√© d√©finitivement purg√©es et ne peuvent plus √™tre restaur√©es.",
        details: [],
      };
    }

    // V√©rifier le niveau d'anonymisation
    switch (anonymizationLevel) {
      case AnonymizationLevel.FULL:
        return {
          canRestore: false,
          severity: "error" as const,
          title: "Restauration impossible",
          message:
            "L'utilisateur a √©t√© compl√®tement anonymis√©. Les donn√©es personnelles ne peuvent pas √™tre restaur√©es.",
          details: [
            "Les donn√©es personnelles ont √©t√© d√©finitivement anonymis√©es",
            "Seules les donn√©es m√©tier anonymis√©es subsistent",
            "La restauration n√©cessiterait une re-cr√©ation manuelle du compte",
          ],
        };

      case AnonymizationLevel.PARTIAL:
        return {
          canRestore: true,
          severity: "warning" as const,
          title: "Restauration possible avec limitations",
          message:
            "L'utilisateur peut √™tre restaur√©, mais certaines donn√©es personnelles ont √©t√© anonymis√©es.",
          details: [
            "‚úÖ Le compte utilisateur sera r√©activ√©",
            "‚ùå Les donn√©es personnelles anonymis√©es ne seront pas restaur√©es",
            "‚úÖ Les donn√©es m√©tier et l'historique seront conserv√©s",
            "‚ö†Ô∏è L'utilisateur devra mettre √† jour ses informations personnelles",
          ],
        };

      case AnonymizationLevel.PURGED:
        return {
          canRestore: false,
          severity: "error" as const,
          title: "Utilisateur purg√©",
          message:
            "Cet utilisateur a √©t√© programm√© pour purge d√©finitive et ne peut plus √™tre restaur√©.",
          details: [],
        };

      default:
        // Soft delete simple sans anonymisation
        return {
          canRestore: true,
          severity: "info" as const,
          title: "Restauration compl√®te possible",
          message:
            "L'utilisateur peut √™tre enti√®rement restaur√© avec toutes ses donn√©es.",
          details: [
            "‚úÖ Toutes les donn√©es personnelles seront restaur√©es",
            "‚úÖ Tous les historiques et donn√©es m√©tier seront conserv√©s",
            "‚úÖ Le compte sera imm√©diatement fonctionnel",
          ],
        };
    }
  };

  const restorabilityStatus = getRestorabilityStatus();

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle sx={{ display: "flex", alignItems: "center", gap: 1 }}>
        <RestoreIcon color="primary" />
        Restauration d'utilisateur
      </DialogTitle>

      <DialogContent>
        {user && (
          <>
            <Alert severity="info" sx={{ mb: 3 }}>
              <Typography variant="body2">
                Vous √™tes sur le point de restaurer l'utilisateur{" "}
                <strong>{user.full_name || user.email}</strong>.
              </Typography>
            </Alert>

            {/* Informations sur le nettoyage des champs d'anonymisation */}
            <Alert severity="success" sx={{ mb: 3 }}>
              <Typography variant="subtitle2" gutterBottom>
                üîÑ Nettoyage automatique lors de la restauration
              </Typography>
              <Typography variant="body2" sx={{ mb: 1 }}>
                Les champs suivants seront automatiquement remis √† z√©ro :
              </Typography>
              <Box component="ul" sx={{ margin: 0, paddingLeft: 2 }}>
                <Typography component="li" variant="caption">
                  ‚Ä¢ deleted_at ‚Üí null (utilisateur redevient actif)
                </Typography>
                <Typography component="li" variant="caption">
                  ‚Ä¢ deletion_reason ‚Üí null
                </Typography>
                <Typography component="li" variant="caption">
                  ‚Ä¢ anonymization_level ‚Üí null
                </Typography>
                <Typography component="li" variant="caption">
                  ‚Ä¢ anonymized_at ‚Üí null
                </Typography>
                <Typography component="li" variant="caption">
                  ‚Ä¢ preserved_data_until ‚Üí null
                </Typography>
                <Typography component="li" variant="caption">
                  ‚Ä¢ scheduled_purge_at ‚Üí null (annulation des purges
                  programm√©es)
                </Typography>
              </Box>
            </Alert>

            {/* Informations utilisateur */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                Informations utilisateur
              </Typography>

              <Box
                sx={{
                  p: 2,
                  bgcolor: "background.paper",
                  borderRadius: 1,
                  border: 1,
                  borderColor: "divider",
                }}
              >
                <Typography variant="body2">
                  <strong>Email :</strong> {user.email}
                </Typography>
                <Typography variant="body2">
                  <strong>R√¥le :</strong> {user.role}
                </Typography>
                <Typography variant="body2">
                  <strong>Supprim√© le :</strong>{" "}
                  {user.deleted_at
                    ? new Date(user.deleted_at).toLocaleString("fr-FR")
                    : "Non d√©fini"}
                </Typography>
                <Typography variant="body2">
                  <strong>Raison :</strong>{" "}
                  {user.deletion_reason || "Non sp√©cifi√©e"}
                </Typography>

                <Box sx={{ mt: 2 }}>
                  <AnonymizationStatus user={user} showDetails />
                </Box>
              </Box>

              <AnonymizationDetails user={user} />
            </Box>

            <Divider sx={{ my: 3 }} />

            {/* Statut de restaurabilit√© */}
            {restorabilityStatus && (
              <Box sx={{ mb: 3 }}>
                <Alert severity={restorabilityStatus.severity} sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    {restorabilityStatus.title}
                  </Typography>
                  <Typography variant="body2">
                    {restorabilityStatus.message}
                  </Typography>
                </Alert>

                {restorabilityStatus.details.length > 0 && (
                  <Box sx={{ ml: 2 }}>
                    <Typography variant="body2" gutterBottom fontWeight="bold">
                      D√©tails de la restauration :
                    </Typography>
                    {restorabilityStatus.details.map((detail, index) => (
                      <Typography key={index} variant="body2" sx={{ mb: 0.5 }}>
                        {detail}
                      </Typography>
                    ))}
                  </Box>
                )}
              </Box>
            )}

            {error && (
              <Alert severity="error" sx={{ mb: 2 }}>
                {error}
              </Alert>
            )}

            {restorabilityStatus?.canRestore && (
              <Alert severity="warning" sx={{ mb: 2 }}>
                <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                  <WarningIcon />
                  <Typography variant="body2">
                    <strong>Important :</strong> La restauration r√©activera
                    imm√©diatement le compte utilisateur. Assurez-vous que cette
                    action est justifi√©e et document√©e.
                  </Typography>
                </Box>
              </Alert>
            )}
          </>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose} disabled={isRestoring}>
          Annuler
        </Button>
        {restorabilityStatus?.canRestore && (
          <Button
            variant="contained"
            color="primary"
            onClick={handleConfirm}
            disabled={isRestoring || !user}
            startIcon={
              isRestoring ? <CircularProgress size={16} /> : <RestoreIcon />
            }
          >
            {isRestoring ? "Restauration..." : "Confirmer la restauration"}
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};
